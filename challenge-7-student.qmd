---
title: "Challenge 7: Incorporating Multiple Inputs"
subtitle: "Functions + Fish"
author: "Alex Lung"
date: "11/10/2024"
format: 
  html:  
    embed-resources: true
    code-tools: true
    theme: journal
editor: source
embed-resources: true
execute: 
  echo: true
  error: true
code-fold: true
code-tools: true
message: false
warning: false
---

```{r}
#| label: setup
library(tidyverse)
library(here)

fish <- read.csv(here("data", "BlackfootFish.csv"))

```

## Condition Index

A frequently used measurement for fish health is a condition index [(Wikipedia article)](https://en.wikipedia.org/wiki/Condition_index_in_fish). The following
simple equation can be used to calculate the approximate condition index of a
fish:

$$\text{condition index} = \frac{weight}{length^3} \times 100$$

**1. There are specific units required for the calculation of a condition index -- length must be in centimeters and weight must be in grams. The weight data for the Blackfoot River fish were collected in grams; the length data were collected in millimeters. Transform the length data to the correct units.**

```{r}
#| label: transform-data-to-have-correct-units

fish <- fish |>
  
  #Alter all of the length values to be in centimeter from millimeter
  mutate(length = length/10)

```

**2. Collecting data of this sort can be very messy! Write a function that will replace unlikely `length` and `weight` measurements with `NA`. Your function should accept at least three inputs:**

+ **a vector of measurements,**
+ **the minimum reasonable value,**
+ **the maximum reasonable value.**

**If a value falls outside these bounds, you should replace it with an `NA`.**

::: callout-tip
If you are struggling with the structure of your function, I would suggest reading the [Mutating Function](https://r4ds.hadley.nz/functions.html#mutate-functions) from R4DS.
:::

```{r}
#| label: function-to-change-impossible-measurements-to-NA

replace_unlikely_values <- function(measurements, min_value, max_value) {
  
  
  #Determine if input values fit between the min and max values
  if(!is.numeric(measurements) || !is.numeric(min_value) || !is.numeric(max_value)) {
    stop("All inputs must be Numeric")
  }
                 
  case_when(measurements < min_value ~ NA_real_,
            measurements > max_value ~ NA_real_,
            .default = measurements)

  
}
  
  
  


```

**Reflection: Similar to lab 7, I learned that vectorizing the data would be much better for the dataset and process for R. I also should take to making sure that the inputs that I want to be inputed will be inputed. I added a numeric check for the inputs as if there is a value that is not an input, then the whole function would not work and if that is the case with no error in place, then nothing will be achieved that can be known.**

**3. After consulting the [Montana Record Table](https://fwp.mt.gov/fish/anglingData/records) for the four species of trout included in these data, I have conjectured that it is unlikely to have measurements for fish below 5 cm and above 80 cm in length or below 10 g and above 4,000 g in weight. Use your function to modify the `length` and `weight` columns of the `fish` dataset based on my cutoffs.**

```{r}
#| label: modify-impossible-values-of-length-weight

fish <- fish |> 
  mutate(
    length = replace_unlikely_values(length, min_val = 5, max_val = 80),
    weight = replace_unlikely_values(weight, min_val = 10, max_val = 4000)
    )


```

**3. Write a function to calculate the condition index of a fish, given inputs of weight and length.**

::: callout-warning
Consider whether you will write a function that works with vectors (accepting
vectors as inputs) or a function that works with data frames (accepting a 
dataset and variable names as inputs)!
:::

```{r}
#| label: condition-function

condition_index <- function(weight, length) {
  
  # Check for any zero or negative values, after removing NA observations
  if (any(weight <= 0 | length <= 0, na.rm = TRUE)) {
    stop("Weight and length must be positive values.")
  }
  
  # Calculate condition index 
  return((weight / (length^3)) * 100)
}
```

**Reflection: This was a case where I made a silly mistake. I accidentally left a few too many zeros when multiplying the ratio, which would be an issue in this case as this would greatly skew the results in the datasheet. I need to be more vigilant and look over my code more carefully as this is a mistake that I should not make.**

**4. Make a thoughtful visualization of how fish conditions have varied over the duration of this study.**

::: callout-warning
### To be thoughtful...

... you need to use at least a third variable!
:::

```{r}
#| label: condition-indices-over-time


fish |> 
  mutate(condition = condition_index(weight, length))|> 

  ggplot(aes(y = condition, color = species)) + 
  geom_boxplot(outliers = FALSE) + 
  facet_wrap(~ year, ncol = 5) + 
  labs(
    x = "",
    y = "",
    title = "Variation in Fish Condition Index of Various Species Over Time",
    subtitle = "Condition Index",
    color = "Species"
  ) +
  scale_color_brewer(palette = "Set2") +
  theme_bw() +
    
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(), 
        axis.ticks.x = element_blank()
        ) 

```
**Reflection: The previous chart that I had was indeed not detailed enough and was not very readable as all the points laid at the bottom, with the only truly visible points being the outliers. The issue is that I used a points graph which did not tell very much, and so I switched to a box plot to show the true variability between all of the species and the years. I need to make sure not to settle for what I could understand (with context), but make sure that if someone who has no idea what they are looking at get a decent understanding of what the graph is trying to depict.** 